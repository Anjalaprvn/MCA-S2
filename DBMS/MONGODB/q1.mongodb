q)
1.	Create a Mongodb Database named “Inventory”. 

--> use inventory;

2.	Create a collection named ‘Products’ and Insert the following documents. db.products.insertMany([

  -->db.createCollection("products");
    * { ok: 1 }
  -->db.products.insertMany([
   {
     _id: 1,
     name: "xPhone",
     price: 799,
     releaseDate: ISODate("2011-05-14"),
     spec: { ram: 4, screen: 6.5, cpu: 2.66 },
   color: ["white", "black"],
     storage: [64, 128, 256]
   },
   {
     _id: 2,
     name: "xTablet",
     price: 899,
     releaseDate: ISODate("2011-09-01"),
     spec: { ram: 16, screen: 9.5, cpu: 3.66 },
   color: ["white", "black", "purple"],
     storage: [128, 256, 512]
      },
   {
     _id: 3,
     name: "SmartTablet",
     price: 899,
     releaseDate: ISODate("2015-01-14"),
     spec: { ram: 12, screen: 9.7, cpu: 3.66 },
     color: ["blue"],
     storage: [16, 64, 128]
   },
   {
     _id: 4,
     name: "SmartPad",
     price: 699,
     releaseDate: ISODate("2020-05-14"),
     spec: { ram: 8, screen: 9.7, cpu: 1.66 },
     color: ["white", "orange", "gold", "gray"],
     storage: [128, 256, 1024]
   },
   {
     _id: 5,
     name: "SmartPhone",
     price: 599,
     releaseDate: ISODate("2022-09-14"),
     spec: { ram: 4, screen: 9.7, cpu: 1.66 },
     color: ["white", "orange", "gold", "gray"],
    storage: [128, 256]
  }
 ]);

{
  acknowledged: true,
    insertedIds: { '0': 1, '1': 2, '2': 3, '3': 4, '4': 5 }
}


3.	Display all documents in the collection product. 

   -->db.products.find()
   
4.	Display all the details of product with _ id is 2. 
   
  -->db.Products.find({ _id: 2 })
        output:-

        [
  {
    _id: 2,
    name: 'xTablet',
    price: 899,
    releaseDate: ISODate('2011-09-01T00:00:00.000Z'),
    spec: { ram: 16, screen: 9.5, cpu: 3.66 },
    color: [ 'white', 'black', 'purple' ],
    storage: [ 128, 256, 512 ]
  }
]

5.	Display the first document in the collection product. 

--> db.products.findOne()
   output:-
        {
  _id: 1,
  name: 'xPhone',
  price: 799,
  releaseDate: ISODate('2011-05-14T00:00:00.000Z'),
  spec: { ram: 4, screen: 6.5, cpu: 2.66 },
  color: [ 'white', 'black' ],
  storage: [ 64, 128, 256 ]
}

6.	Display name and price of product with _ id is 5. 
--> db.products.find({ _id: 5 },{ name: 1, price: 1, _id: 0 })
    output:-
    [ { name: 'SmartPhone', price: 599 } ]

7.	Query the products collection to select all documents where the value of the price field equals 899. 
  --> db.products.find({ _id: 5 },{ name: 1, price: 1, _id: 0 })
   output:-
       [ { name: 'SmartPhone', price: 599 } ]
8.Search for documents where the value of the ram field in the spec document equals 4: 
--> db.products.find({ "spec.ram": 4 })
   output:-
   [
  {
    _id: 1,
    name: 'xPhone',
    price: 799,
    releaseDate: ISODate('2011-05-14T00:00:00.000Z'),
    spec: { ram: 4, screen: 6.5, cpu: 2.66 },
    color: [ 'white', 'black' ],
    storage: [ 64, 128, 256 ]
  },
  {
    _id: 5,
    name: 'SmartPhone',
    price: 599,
    releaseDate: ISODate('2022-09-14T00:00:00.000Z'),
    spec: { ram: 4, screen: 9.7, cpu: 1.66 },
    color: [ 'white', 'orange', 'gold', 'gray' ],
    storage: [ 128, 256 ]
  }
]

9.	Query the products collection to find all documents where the array color contains an element with the value "black":

 --> db.products.find({ color: "black" })
 output:-
   [
  {
    _id: 1,
    name: 'xPhone',
    price: 799,
    releaseDate: ISODate('2011-05-14T00:00:00.000Z'),
    spec: { ram: 4, screen: 6.5, cpu: 2.66 },
    color: [ 'white', 'black' ],
    storage: [ 64, 128, 256 ]
  },
  {
    _id: 2,
    name: 'xTablet',
    price: 899,
    releaseDate: ISODate('2011-09-01T00:00:00.000Z'),
    spec: { ram: 16, screen: 9.5, cpu: 3.66 },
    color: [ 'white', 'black', 'purple' ],
    storage: [ 128, 256, 512 ]
  }
]

10.	Select documents in the products collection with the published date is 2020-05-14:  
-->db.products.find({ releaseDate: ISODate("2020-05-14") })
    output:-
    [
  {
    _id: 4,
    name: 'SmartPad',
    price: 699,
    releaseDate: ISODate('2020-05-14T00:00:00.000Z'),
    spec: { ram: 8, screen: 9.7, cpu: 1.66 },
    color: [ 'white', 'orange', 'gold', 'gray' ],
    storage: [ 128, 256, 1024 ]
  }
]


11.	select documents from the products collection where price is less than 799: 
--> db.products.find({ price: { $lt: 799 } })
  output:_
     [
  {
    _id: 4,
    name: 'SmartPad',
    price: 699,
    releaseDate: ISODate('2020-05-14T00:00:00.000Z'),
    spec: { ram: 8, screen: 9.7, cpu: 1.66 },
    color: [ 'white', 'orange', 'gold', 'gray' ],
    storage: [ 128, 256, 1024 ]
  },
  {
    _id: 5,
    name: 'SmartPhone',
    price: 599,
    releaseDate: ISODate('2022-09-14T00:00:00.000Z'),
    spec: { ram: 4, screen: 9.7, cpu: 1.66 },
    color: [ 'white', 'orange', 'gold', 'gray' ],
    storage: [ 128, 256 ]
  }
]
12.	select documents where the value of the screen field in the spec document is less than 7: 
-->db.products.find({ "spec.screen": { $lt: 7 } })
  output:-
      [
  {
    _id: 1,
    name: 'xPhone',
    price: 799,
    releaseDate: ISODate('2011-05-14T00:00:00.000Z'),
    spec: { ram: 4, screen: 6.5, cpu: 2.66 },
    color: [ 'white', 'black' ],
    storage: [ 64, 128, 256 ]
  }
]
13.	 query the products collection to find all documents where the array storage has at least one element less than 128:
-->db.products.find({ storage: { $elemMatch: { $lt: 128 } } })
output:-
[
  {
    _id: 1,
    name: 'xPhone',
    price: 799,
    releaseDate: ISODate('2011-05-14T00:00:00.000Z'),
    spec: { ram: 4, screen: 6.5, cpu: 2.66 },
    color: [ 'white', 'black' ],
    storage: [ 64, 128, 256 ]
  },
  {
    _id: 3,
    name: 'SmartTablet',
    price: 899,
    releaseDate: ISODate('2015-01-14T00:00:00.000Z'),
    spec: { ram: 12, screen: 9.7, cpu: 3.66 },
    color: [ 'blue' ],
    storage: [ 16, 64, 128 ]
  }
]
14.	Display documents from the products collection whose the price is either 599 or 799: 
--> db.products.find({ price: { $in: [599, 799] } })
output:-[
  {
    _id: 1,
    name: 'xPhone',
    price: 799,
    releaseDate: ISODate('2011-05-14T00:00:00.000Z'),
    spec: { ram: 4, screen: 6.5, cpu: 2.66 },
    color: [ 'white', 'black' ],
    storage: [ 64, 128, 256 ]
  },
  {
    _id: 5,
    name: 'SmartPhone',
    price: 599,
    releaseDate: ISODate('2022-09-14T00:00:00.000Z'),
    spec: { ram: 4, screen: 9.7, cpu: 1.66 },
    color: [ 'white', 'orange', 'gold', 'gray' ],
    storage: [ 128, 256 ]
  }
]


15.	Display documents where the color array has at least one element either "black" or "white":
--> db.products.find({ color: { $in: ["black", "white"] } })

output:-[
  {
    _id: 1,
    name: 'xPhone',
    price: 799,
    releaseDate: ISODate('2011-05-14T00:00:00.000Z'),
    spec: { ram: 4, screen: 6.5, cpu: 2.66 },
    color: [ 'white', 'black' ],
    storage: [ 64, 128, 256 ]
  },
  {
    _id: 2,
    name: 'xTablet',
    price: 899,
    releaseDate: ISODate('2011-09-01T00:00:00.000Z'),
    spec: { ram: 16, screen: 9.5, cpu: 3.66 },
    color: [ 'white', 'black', 'purple' ],
    storage: [ 128, 256, 512 ]
  },
  {
    _id: 4,
    name: 'SmartPad',
    price: 699,
    releaseDate: ISODate('2020-05-14T00:00:00.000Z'),
    spec: { ram: 8, screen: 9.7, cpu: 1.66 },
    color: [ 'white', 'orange', 'gold', 'gray' ],
    storage: [ 128, 256, 1024 ]
  },
  {
    _id: 5,
    name: 'SmartPhone',
    price: 599,
    releaseDate: ISODate('2022-09-14T00:00:00.000Z'),
    spec: { ram: 4, screen: 9.7, cpu: 1.66 },
    color: [ 'white', 'orange', 'gold', 'gray' ],
    storage: [ 128, 256 ]
  }
]


